# nvidia-GPU环境
FROM nvidia/cuda:11.1-cudnn8-devel-ubuntu18.04

#--------------------------------------------------------------------------
# ubuntu基本环境

# 更改apt国内源
RUN echo "\
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse"\
>> /etc/apt/sources.list


# NVIDIA-docker有时会变化公匙
RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub

# 安装基础环境
RUN apt-get update && apt-get install -y apt-utils sudo apt-transport-https vim build-essential git unzip zip libssl-dev iptables openssh-server net-tools curl lsof net-tools netcat tree cmake libsm6 libxext6 opencv-python-headless lrzsz # ffmpeg

# 开启所有用户的ssh登录许可
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config && \
echo 'sshd:ALL' >> /etc/hosts.aldlow

# 创建普通用户，并分配sudo权限
ARG user=wzy
ARG passwd=123
ARG userhome=/home/${user}

RUN adduser --disabled-password --gecos "" ${user} && \
    usermod -aG sudo ${user} && \
    echo "%sudo  ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/nopasswd && \
    echo root:${passwd} | chpasswd && \
    echo ${user}:${passwd} | chpasswd && \
    touch ${userhome}/.sudo_as_admin_successful



#--------------------------------------------------------------------------
# anaconda及基础python环境

# 拷贝安装包至容器临时文件夹tmp
COPY Anaconda3-2020.07-Linux-x86_64.sh torch-1.8.2+cu111-cp38-cp38-linux_x86_64.whl torchaudio-0.8.2-cp38-cp38-linux_x86_64.whl torchvision-0.9.2+cu111-cp38-cp38-linux_x86_64.whl /tmp/

# 安装anaconda
RUN chmod 777 /tmp/Anaconda3-2020.07-Linux-x86_64.sh && /bin/bash /tmp/Anaconda3-2020.07-Linux-x86_64.sh -b -p /usr/local/anaconda3
RUN echo "export PATH=/usr/local/anaconda3/bin:$PATH" >> ~/.bashrc  &&  /bin/bash -c 'source ~/.bashrc'

# 更改pip国内源
RUN mkdir ~/.pip && cd ~/.pip && \
echo "\
[global]\n\
index-url = https://pypi.tuna.tsinghua.edu.cn/simple/\n\
\n\
[install]\n\
https://pypi.tuna.tsinghua.edu.cn\n"\
> ~/.pip/pip.conf 

# 更改Conda国内源
RUN echo "\
channels:\n\
   - defaults\n\
show_channel_urls: true\n\
channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\n\
default_channels:\n\
   - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n\
   - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n\
   - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n\
   - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n\
   - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n\
custom_channels:\n\
   conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\
   msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\
   bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\
   menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\
   pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\
   simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n"\
> ~/.condarc

WORKDIR /tmp

# 默认安装python包
RUN /usr/local/anaconda3/bin/pip install yacs termcolor pynvml redis gunicorn aiohttp pybind11 tabulate trtpy funcy scikit-multilearn opencv-python torch-1.8.2+cu111-cp38-cp38-linux_x86_64.whl torchaudio-0.8.2-cp38-cp38-linux_x86_64.whl torchvision-0.9.2+cu111-cp38-cp38-linux_x86_64.whl
    
# 配置普通用户环境变量
RUN echo export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin >> ${userhome}/.bashrc &&  /bin/bash -c 'source ${userhome}/.bashrc'

# 删除临时安装包
WORKDIR /
RUN rm -rf /tmp/*


#--------------------------------------------------------------------------
# 项目安装

# 配置项目安装脚本install.sh并安装
RUN echo "\
echo INSTALL FINISH...\n\
echo WELCOME!" >> /install.sh
RUN chmod +x /install.sh

# 配置启动脚本start.sh,设置仅首次启动容器执行install.sh
RUN echo "\
CONTAINER_ALREADY_STARTED='CONTAINER_ALREADY_STARTED_PLACEHOLDER'\n\
if [ ! -e \$CONTAINER_ALREADY_STARTED ]; then\n\
    touch \$CONTAINER_ALREADY_STARTED\n\
    echo '-- First container startup --  wait install...'\n\
	/install.sh\n\
fi" >> /start.sh
RUN chmod +x /start.sh

# 容器入口
ENTRYPOINT service ssh start && /start.sh && /bin/bash